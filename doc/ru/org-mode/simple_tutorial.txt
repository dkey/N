* Типы

** Встроенные типы

 | Тип    | Описание                                  |
 |--------+-------------------------------------------|
 | bool   | булево                                    |
 | int    | целое со знаком                           |
 | double | число с плавающей точкой двойной точности |

** Тип логических значений

   Тип bool описывает только два значения: истина(true) и ложь(false).

*** Логические литералы

| Литерал | Значение |
|---------+----------|
| true    | истина   |
| false   | ложь     |


** Типы целых чисел

    Данные типы предназначены для описания представления целых чисел и
    выполнения целочисленных вычислений.

 | Тип | Описание                                                  |
 |-----+-----------------------------------------------------------|
 | int | целое со знаком "обычного" размера(зависит от реализации) |


*** Литералы целых чисел

 | Описание          | Примеры                     |
 |-------------------+-----------------------------|
 | Десятичные        | 0   123   -1202   999912222 |
 | Восьмиричные      | 0o777   0o666   0o577       |
 | Шестнадцатиричные | 0xFFFA   0xFFFFFFFF   0xBAD |
  
    Десятичные литералы состоят из опционального знака('+' или '-') и
    последовательности цифр. Допускается вставка знака '\_', но не в
    начало и не в конец: 1\_000\_000\_000

    Восьмеричные литералы начинаются с 0 и символа 'о'(0o), за
    которыми следует последовательность восьмеричных цифр: 0o777 0o666

    Шестандцатиричные литералы начинаются с 0 и символа 'x'(0x), за
    которыми следует последовательность шестнадцатиричных цифр: 0xFFAD
    0xF1FA

    Компилятор должен выдавать предупреждение если данные,
    представленные литералом, не могут быть представлены ни одним из
    доступных типов (например, если целое число не помещается ни в
    один из возможных интегральных типов).


** Типы чисел с плавающей точкой

    Данные типы предназначенны для представления чисел с плавающей
    точкой и выполнения соответсвующих вычислений.

 | Тип    | Описание                                  |
 |--------+-------------------------------------------|
 | double | число с плавающей точкой двойной точности |


*** Литералы чисел с плавающей точкой

 | Описание                     | Примеры                   |
 |------------------------------+---------------------------|
 | "Обычный" формат             | 123.321   0.123   .123    |
 | Формат с показателем степени | 1.23e12   1e-2    7.02e23 |

 Литералы с плавающей точкой представляют собой необязательный знак
 числа, за которым следует опциональная последовательность десятичных
 цифр, символ '.', последовательность десятичных цифр и необязательный
 показатель степени. Показатель степени начинается с символа 'e' или
 'E', за которым следует опциональный знак('+' или '-') и одна или
 несколько десятичных цифр. В последовательности цифр до '.' может
 быть вставлен символ '\_', но не в начале и не в конце.

 Так же существует специальные литералы для представления специальных
 состояний чисел с плавающей точкой

 | Литерал/значение | Описание                                                                     |
 |------------------+------------------------------------------------------------------------------|
 | NaN              | Not-a-Number, например деление нуля на ноль                                  |
 | +/-INF           | +/-Infinity, возникает при делении положительных/отрицательных чисел на ноль |


** Тип void

   Тип void используется для указания отсутствия значения. Применяется в качестве типа возвращаемого значения функции.


* Объявления и определения

  Перед использованием некоторого идентификатора в программе его
  необходимо объявить.  Объявление идентификатора любого типа, кроме
  функций так же является и его определением(т.е. созданием сущности,
  соответствующей имени). В определении может быть указано значение. В
  случае, если значение не указано, оно будет установлено в значение
  по умолчанию для данного типа.

| Тип    | Значение по умолчанию |
|--------+-----------------------|
| int    |                     0 |
| double |                   0.0 |
| bool   |                 false |

  Объявление и определение функции может быть разделено.

  Синтаксиc объявлений:

#+begin_src C

  <тип> <имя>;

  <имя-функции>(<список объявлений аргументов через запятую>) -> <тип возвращаемого значения>;

#+end_src

  Синтаксис определений:

#+begin_src C

  <тип> <имя> = <значение>;

  <имя-функции>(<список объявлений аргументов через запятую>) -> <тип возвращаемого значения>
  {
      <последовательность инструкций>
  }

#+end_src


** Область видимости

   Область видимости имени начинается с места его объявления и
   заканчивается в конце блока, в котором это имя объявлено.


* Выражения

** Встроенные операторы

 В каждом блоке расположены операторы с одинаковым приоритетом, блоки
 упорядочены по уменьшению приоритета. Колонка "Тип результата"
 заполняется в том случае, если тип результата отличется от типа
 операндов.

 | Оператор                  | Описание                   | Ассоциативность | Доступно для типов | Тип результата         |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | ()                        | вызов                      | лево-           | функция            | тип результата функции |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | /!/                       | отрицание                  | право-          | bool               |                        |
 | +                         | унарный плюс               | право-          | int, double        |                        |
 | -                         | унарный минус              | право-          | int, double        |                        |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | \star                     | умножение                  | лево-           | int, double        |                        |
 | \frasl                    | деление                    | лево-           | double             |                        |
 | ~/                        | целочисленное деление      | лево-           | int                |                        |
 | %                         | остаток от деления         | лево-           | int                |                        |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | +                         | сложение                   | лево-           | int, double        |                        |
 | -                         | вычитание                  | лево-           | int, double        |                        |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | >                         | больше                     | лево-           | int, double        | bool                   |
 | <                         | меньше                     | лево-           | int, double        | bool                   |
 | >=                        | больше или равно           | лево-           | int, double        | bool                   |
 | <=                        | меньше или равно           | лево-           | int, double        | bool                   |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | /==/                      | равно                      | лево-           | int, double, bool  | bool                   |
 | !=                        | не равно                   | лево-           | int, double, bool  | bool                   |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | &&                        | логическое и               | лево-           | bool               |                        |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | ^^                        | логическое исключающее или | лево-           | bool               |                        |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | \vert\vert                | логическое или             | лево-           | bool               |                        |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | <a> if <условие> else <b> | выбор по условию           | лево-           | <условие> - bool   | тип <a> и <b>          |
 |---------------------------+----------------------------+-----------------+--------------------+------------------------|
 | /=/                       | присваивание               | право-          | int, double, bool  |                        |


** Преобразования типов

*** Неявные преобразования типов

    int может быть неявно преобразован к double.


* Инструкции

  Объявление и определение являются инструкциями. Выражение,
  заканчивающееся на ; является инструкцией.


** Инструкция return

   Инструкция return выполняет выход из текущей функции с возвратом
   указанного значения в качестве результата.

#+begin_src C

   return <значение>;

#+end_src


* Функции

  Объявление функции задает имя функции, количество и типы аргументов
  и тип возвращаемого значения. Определение добавляет к этому
  последовательность инструкций, выполняемых при вызове функции.
  Объявление и определение так же могут содержать имена аргументов
  функции.

  Каждая используемая в коде функция должна быть объявлена.  Каждая
  вызываемая в программе функция должна быть определена.

  Допускается рекурсивный вызов функции.


** Передача аргументов

   Передача фактических аргументов при вызове функции эквивалентна
   созданию под каждый формальный параметр локальной переменной,
   инициализированной значением соответствующего фактического
   аргумента. Использование параметров в функции аналогично
   использованию локальных переменных того же типа.


** Возвращаемое значение

   Функция должна возвращать значение соответствующего типа, за
   исключением случаев, когда она объявлена, как возвращающая void.

   Если функция имеет тип возвращаемого значения, отличный от void, то
   она обязана содержать инструкцию return.

   
** Функция main

   Выполнение программы начинается с функции main() -> int


* Временное решение для операций ввода/вывода

 | \_read\_int    | считывает со стандартного ввода число типа int     |
 | \_write\_int   | выводит на стандартный вывод число типа int        |
 | \_read\_double | считывает со стандартного ввода число типа double  |
 | \_read\_int    | выводит на стандартный вывод число типа double     |
 | \_read\_bool   | считывает со стандартного ввода значение типа bool |
 | \_write\_bool  | выводит на стандартный вывод значение типа bool |
